services:
  db:
    image: postgres:15-alpine
    container_name: infernode-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - db-data:/var/lib/postgresql/data
    env_file:
      - .env
    ports:
      - "${DB_PORT}:${DB_PORT}"

  api:
    build: .
    #restart: unless-stopped
    container_name: infernode-api
    #command: sh -c "chmod +x ./scripts/wait-for-db.sh && npm run keys:generate && chown -R 1000:1000 ./keys && npm run dev"
    command: npm run dev
    env_file:
      - .env
    volumes:
      - .:/usr/src/app
    ports:
      - "${API_PORT}:${API_PORT}"
    environment:
      DB_HOST: db # Docker override
      PORT: ${API_PORT}
      NODE_ENV: ${NODE_ENV}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      JWT_PRIVATE_KEY_PATH: ${JWT_PRIVATE_KEY_PATH}
      JWT_PUBLIC_KEY_PATH: ${JWT_PUBLIC_KEY_PATH}
      JWT_ALGORITHM: ${JWT_ALGORITHM}
      DB_PORT: ${DB_PORT}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_DIALECT: ${DB_DIALECT}
    depends_on:
      db:
        condition: service_healthy

volumes:
  db-data:
